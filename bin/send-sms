#!/usr/bin/env node

console.log('Begin scheduled task: Send SMS reminders');

async = require("async");
var moment = require('moment-timezone');

var Bond = require('../services/models/Bond');

var accountSid = 'AC12b8753775aa56a229fc318f03f82eea';
var authToken = '307fcf54cd3fa3ed76c862b026c71a10';
var client = require('twilio')(accountSid, authToken);

function shouldSendSmsNow(now, smsTime, lastSmsSent) {

  nowChicago = moment.tz(now.toISOString(), 'America/Chicago');

  // If Sunday or Saturday, do not send
  if (nowChicago.day() == 0) { return false; }
  if (nowChicago.day() == 6) { return false; }

  var nowChicagoTodayMinutes = (nowChicago.hour() * 60) + nowChicago.minute();

  var smsTimeTodayMinutes = 0;
  if (smsTime === 0) {
    smsTimeTodayMinutes = 14 * 60;
  } else if (smsTime === 1) {
    smsTimeTodayMinutes = 14.5 * 60;
  } else if (smsTime === 2) {
    smsTimeTodayMinutes = 15 * 60;
  } else if (smsTime === 3) {
    smsTimeTodayMinutes = 15.5 * 60;
  }

  // Have not reached the time to send SMS today yet, so do not send
  if (nowChicagoTodayMinutes < smsTimeTodayMinutes) { return false; }
  
  // Have reached the time to send SMS, so if last time sending was before today, then do send
  lastSmsSentChicago = moment.tz(lastSmsSent.toISOString(), 'America/Chicago');
  if (lastSmsSentChicago.year() < nowChicago.year()) { return true; }
  if (lastSmsSentChicago.dayOfYear() < nowChicago.dayOfYear()) { return true; }

  return false;
}

function sendSms(phoneNumber, name, callback) {

  var bodies = [
    'Work is important. But so is ' + name + '! Send a message as your day wraps up',
    'Today is CRAZY. Let ' + name + ' know when you\'re getting off work',
    'Wow! Time flies. Don\'t forget about ' + name + ' as you get outta here',
  ];
  var bodyMessage = bodies[Math.floor((Math.random() * 3))];

  client.sms.messages.create({
    body: bodyMessage,
    to: phoneNumber,
    from: '+15039255863'
  }, function(error, responseData) {
	if (error) {
	  console.log('Error sending SMS to ' + phoneNumber);
      callback(1);
 	} else {
      console.log('SMS sent from ' + responseData.from + ' to ' + responseData.to + ' with body: ' + responseData.body);
      callback(0);
    }
  });
}

Bond.find().exec(function (error, bonds) {
  if (error) {
    console.log('Error getting Bonds from database: ' + error);
    Bond.connection.close();
  } else {
    var sendSmsAsyncTasks = [];
    var changedBonds = [];
    var now = new Date();    
    bonds.forEach(function (bond) {
      var smsTime1 = bond.smsTime1;
      var smsTime2 = bond.smsTime2;
      var lastSmsSent1 = bond.lastSmsSent1;
      var lastSmsSent2 = bond.lastSmsSent2;

      if (shouldSendSmsNow(now, smsTime1, lastSmsSent1)) {
        sendSmsAsyncTasks.push( function (callback) { 
          sendSms(bond.phoneNumber1, bond.name2, function (error) {
            if (!error) { bond.lastSmsSent1 = now; }
            callback(); 
          });
        });
      }
      if (shouldSendSmsNow(now, smsTime2, lastSmsSent2)) {
        sendSmsAsyncTasks.push( function (callback) { 
          sendSms(bond.phoneNumber2, bond.name1, function (error) {
            if (!error) { bond.lastSmsSent2 = now; }
            callback(); 
          }); 
        });
      }
      changedBonds.push(bond);
    }); // bonds.forEach

    async.parallel(sendSmsAsyncTasks, function () {
      var savedCount = 0;
      changedBonds.forEach(function (changedBond) {
        Bond.findByIdAndUpdate(changedBond._id, changedBond, function () {
          savedCount++;
          if (savedCount >= changedBonds.length) {
            Bond.connection.close();
            console.log('Finished scheduled task: Send SMS reminders');	
          }
        });
      }); // changedBonds.forEach
    }); // async.parallel

  } // else
}); // Bond.find().exec

